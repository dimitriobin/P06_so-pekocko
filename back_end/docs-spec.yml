openapi: "3.0.0"
info:
  title: Piquante
  version: "0.1.0"
  description: >
     Parcours developpeur web - projet 06
host: localhost:3000
explorer: true
basePath: /
paths:
  /api/sauces:
    get:
      tags: [Sauces]
      summary: READ all sauces
      description: Request an array of all sauces
      produces: application/json
      responses:
        '200':
          description: Return an array of all sauces objects in database
          content:
            application/json: 
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SauceResponse'
        '401':
          description: Respond with an unauthorized message
          content:
            application/json: 
              schema:
                type: string
                example: Please login
        '404':
          description: Not found
          content:
            application/json: 
              schema:
                type: object
                example: {error, message: 'Sauce not found'}
        '500':
          description: Internal error
          content:
            application/json: 
              schema:
                type: string
                example: Please login
    post:
      tags: [Sauces]
      summary: CREATE one sauce
      description: Post a new sauce 
      produces: application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SauceRequest'
          application/x-www-url-encoded:
            schema:
              $ref: '#/components/schemas/SauceRequest'
      responses:
        '201':
          description: Respond with a created ressource
          content:
            application/json: 
              schema:
                type: object
                example: {"message": "Sauce saved"}
        '400':
          description: Bad Request
          content:
            application/json: 
              schema:
                type: object
                example: {"error": {}}
        '401':
          description: Unauthorized message
          content:
            application/json: 
              schema:
                type: string
                example: Please login
  /api/sauces/:id:
    get:
      tags: [Sauces]
      summary: READ one sauce
      description: request the sauce's object
      produces: application/json
      parameters:
      - name: id
        in: path
        description: the sauce's id
        required: true
        schema:
          type: string
          style: simple
          example: localhost:3000/api/sauces/4ds5s6752s31ds5q67f5d
      responses:
        '200':
          description: Respond an object of all properties for this particular id
          content:
            application/json: 
              schema:
                type: object
                $ref: '#/components/schemas/SauceResponse'
        '404':
          description: Not found
          content:
            application/json: 
              schema:
                type: object
                example: {error, message: 'Sauce not found'}
        '401':
          description: Respond an unauthorized message
          content:
            application/json: 
              schema:
                type: string
                example: Please login
    put:
      tags: [Sauces]
      summary: UPDATE one sauce
      description: Replace the sauce's object with this new object
      produces: application/json
      parameters:
      - name: id
        in: path
        description: the sauce's id
        required: true
        schema:
          type: string
          style: simple
          example: localhost:3000/api/sauces/4ds5s6752s31ds5q67f5d
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SauceRequest'
          application/x-www-url-encoded:
            schema:
              $ref: '#/components/schemas/SauceRequest'
      responses:
        '200':
          description: Respond a success message
          content:
            application/json: 
              schema:
                type: object
                example: {"message": "Sauce updated"}
        '404':
          description: Not found
          content:
            application/json: 
              schema:
                type: object
                example: {error, message: 'Sauce not found'}
        '401':
          description: Respond an unauthorized message
          content:
            application/json: 
              schema:
                type: string
                example: Please login
    delete:
      tags: [Sauces]
      summary: DELETE one sauce
      description: Remove the sauce's object from the database
      produces: application/json
      parameters:
      - name: id
        in: path
        description: the sauce's id
        required: true
        schema:
          type: string
          style: simple
          example: localhost:3000/api/sauces/4ds5s6752s31ds5q67f5d
      responses:
        '200':
          description: Respond a success message
          content:
            application/json:
              schema:
                type: object
                example: {"message": "Sauce deleted"}
        '404':
          description: Not found
          content:
            application/json: 
              schema:
                type: object
                example: {error, message: 'Sauce not found'}
        '401':
          description: Respond an unauthorized message
          content:
            application/json: 
              schema:
                type: string
                example: Please login
        '500':
          description: Respond with an internal servor message
          content:
            application/json: 
              schema:
                type: object
                example: {"error": {}}
  /api/sauces/:id/like:
    post:
      tags: [Sauces]
      summary: Like one sauce
      description: Like or dislike a sauce
      produces: application/json
      parameters:
      - name: id
        in: path
        description: the sauce's id
        required: true
        schema:
          type: string
          style: simple
          example: localhost:3000/api/sauces/4ds5s6752s31ds5q67f5d
      requestBody:
        required: true
        description: The number must be either -1, 0 or 1. -1 = dislike; 0 = nothing; 1 = like
        content:
          application/json:
            schema:
              type: object
              example: { userId: 'string', like: 'number'}
          application/x-www-url-encoded:
            schema:
              type: object
              example: { userId: 'string', like: 'number'}
      responses:
        '200':
          description: Respond a success message
          content:
            application/json:
              schema:
                type: object
                example: {"message": "Sauce deleted"}
        '404':
          description: Not found
          content:
            application/json: 
              schema:
                type: object
                example: {error, message: 'Sauce not found'}
        '401':
          description: Respond an unauthorized message
          content:
            application/json: 
              schema:
                type: string
                example: Please login
        '500':
          description: Respond with an internal servor message
          content:
            application/json: 
              schema:
                type: object
                example: {"error": {}}

  /api/auth/signup:
    post:
      tags: [users]
      summary: CREATE one user
      description: Signup a new user 
      produces: application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-url-encoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: Respond with a created ressource
          content:
            application/json: 
              schema:
                type: object
                example: {"message": "User saved"}
        '400':
          description: Respond with a Bad Request
          content:
            application/json: 
              schema:
                type: object
                example: {"error": {}}
        '401':
          description: Respond with an unauthorized message
          content:
            application/json: 
              schema:
                type: string
                example: Please login
        '500':
          description: Respond with an internal servor message
          content:
            application/json: 
              schema:
                type: object
                example: {"error": {}}
  /api/auth/login:
    post:
      tags: [users]
      summary: LOGIN one user
      description: Login a user 
      produces: application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-url-encoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Return the session's infos 
          content:
            application/json: 
              schema:
                type: object
                example: {"userId": "45fd6sf45ds64f5d6s", "token": "f4ds56fd45s6456dsf654fds654dsf654fds645dfs465dfs546fds465dfs654dsf654"}
        '404':
          description: Respond with a Bad Request
          content:
            application/json: 
              schema:
                type: object
                example: {"error": "User not found"}
        '401':
          description: Respond with an unauthorized message
          content:
            application/json: 
              schema:
                type: object
                example: {"error": "Wrong password"}
        '500':
          description: Respond with an internal servor message
          content:
            application/json: 
              schema:
                type: object
                example: {"error": {}}
  /api/auth/users/:id:
    get:
      tags: [users]
      summary: READ one user
      description: Read a user 
      produces: application/json
      parameters:
      - name: id
        in: path
        description: the userId
        required: true
        schema:
          type: string
          style: simple
          example: localhost:3000/api/auth/users/4ds5s6752s31ds5q67f5d
      responses:
        '200':
          description: Return an object of all infos for this user 
          content:
            application/json: 
              schema:
                type: object
                example: {"email": "user@gmail.com", "password": "sdf4654fds55f6d4s5d6fsf4d564fd6s54d6f"}
        '404':
          description: Respond with a Bad Request
          content:
            application/json: 
              schema:
                type: object
                example: {"error": "User not found"}
        '401':
          description: Respond with an unauthorized message
          content:
            application/json: 
              schema:
                type: string
                example: Please login
    put:
      tags: [users]
      summary: UPDATE one user
      description: Update informations for a user 
      produces: application/json
      parameters:
      - name: id
        in: path
        description: the userId
        required: true
        schema:
          type: string
          style: simple
          example: localhost:3000/api/auth/users/4ds5s6752s31ds5q67f5d
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-url-encoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Return the session's infos 
          content:
            application/json: 
              schema:
                type: object
                example: {"message": "User updated"}
        '400':
          description: Respond with a Bad Request
          content:
            application/json: 
              schema:
                type: object
                example: {"error": {}}
        '401':
          description: Respond with an unauthorized message
          content:
            application/json: 
              schema:
                type: string
                example: Please login
        '500':
          description: Respond with an internal servor message
          content:
            application/json: 
              schema:
                type: object
                example: {"error": {}}
    delete:
      tags: [users]
      summary: DELETE one user
      description: Remove a user  
      produces: application/json
      parameters:
      - name: id
        in: path
        description: the userId
        required: true
        schema:
          type: string
          style: simple
          example: localhost:3000/api/auth/users/4ds5s6752s31ds5q67f5d
      responses:
        '200':
          description: Return the session's infos 
          content:
            application/json: 
              schema:
                type: object
                example: {"message": "User deleted"}
        '404':
          description: Respond with a Bad Request
          content:
            application/json: 
              schema:
                type: object
                example: {"error": "User not found"}
        '401':
          description: Respond with an unauthorized message
          content:
            application/json: 
              schema:
                type: string
                example: Please login
        '500':
          description: Respond with an internal servor message
          content:
            application/json: 
              schema:
                type: object
                example: {"error": {}}
  /api/auth/users/:id/exports:
    get:
      tags: [users]
      summary: EXPORT one user
      description: Create a file with all the infos and send it in a download method  
      produces: application/json
      parameters:
      - name: id
        in: path
        description: the userId
        required: true
        schema:
          type: string
          style: simple
          example: localhost:3000/api/auth/users/4ds5s6752s31ds5q67f5d/exports
      responses:
        '201':
          description: Respond with a created ressource message 
          content:
            text/plain: 
              schema:
                type: file
        '404':
          description: Respond with a not found message
          content:
            application/json: 
              schema:
                type: object
                example: {"error": "User not found"}
        '401':
          description: Respond with an unauthorized message
          content:
            application/json: 
              schema:
                type: string
                example: Please login
        '500':
          description: Respond with an internal servor message
          content:
            application/json: 
              schema:
                type: object
                example: {"error": {}}
  /api/auth/users/reports:
    post:
      tags: [users]
      summary: Report a sauce
      description: Post a report with a status of 'pending'  
      produces: application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                itemId:
                  type: string
                type:
                  type: string
                status:
                  type: string
              example: {"itemId": "4fds54fd5s64fd65s", "type": "Violent content", "status": "pending"}
          application/x-www-url-encoded:
            schema:
              type: object
              properties:
                itemId:
                  type: string
                type:
                  type: string
                status:
                  type: string
              example: {"itemId": "4fds54fd5s64fd65s", "type": "Violent content", "status": "pending"}
      responses:
        '202':
          description: Respond with an accepted ressource message 
          content:
            application/json: 
              schema:
                type: object
                example: {"message": "A report has been created, we will deal with it as soon as possible."}
        '400':
          description: Respond with a Bad Request
          content:
            application/json: 
              schema:
                type: object
                example: {"error": {}}
        '404':
          description: Respond with a not found message
          content:
            application/json: 
              schema:
                type: object
                example: {"error": "Sauce not found"}
        '401':
          description: Respond with an unauthorized message
          content:
            application/json: 
              schema:
                type: string
                example: Please login
components:
  schemas:
    SauceRequest:
      type: object
      properties:
        userId:
          type: string
        name:
          type: string
        manufacturer:
          type: string
        description:
          type: string
        mainPepper:
          type: string
        imageUrl:
          type: string
        heat:
          type: integer
          minimum: 0
          maximum: 10
      required: 
        - userId
        - name
        - manufacturer
        - description
        - mainPepper
        - imageUrl
        - heat
      example:
        userId: 5f82edcc93475b24f0f30fd2
        name: tartare
        manufacturer: sauce company name
        description: THE real sauce tartare
        mainPepper: ciboulette
        imageUrl: 'http://localhost:3000/images/sauceTartare.jpg1602416600065.jpg'
        heat: 2
    SauceResponse:
      type: object
      properties:
        userId:
          type: string
        name:
          type: string
        manufacturer:
          type: string
        description:
          type: string
        mainPepper:
          type: string
        imageUrl:
          type: string
        heat:
          type: integer
          minimum: 0
          maximum: 10
        likes:
          type: integer
          minimum: 0
        dislikes:
          type: integer
          minimum: 0
        usersLiked:
          type: array
          items:
            type: string
        usersDisliked:
          type: array
          items:
            type: string
      required: 
        - userId
        - name
        - manufacturer
        - description
        - mainPepper
        - imageUrl
        - heat
      example:
        _id: 5f82efd896023c3290f5d9f8
        userId: 5f82edcc93475b24f0f30fd2
        name: tartare
        manufacturer: sauce company name
        description: THE real sauce tartare
        mainPepper: ciboulette
        imageUrl: 'http://localhost:3000/images/sauceTartare.jpg1602416600065.jpg'
        heat: 2
        likes: 3
        dislikes: 0
        usersLiked: ["5f82edcc93475b24f0f30fd2", "5f82f7122daab413945e9ea3", "5f831be2d9378833ac04c4b4"]
        usersDisliked: []
        __v: 0
    User:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      required: 
        - email
        - password
      example:
        email: user@mail.com
        password: 123Password!